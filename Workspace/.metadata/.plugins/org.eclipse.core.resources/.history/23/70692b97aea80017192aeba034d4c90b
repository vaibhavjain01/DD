
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.rmi.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;
import java.util.Vector;

class adminClient extends Thread
{
	private String clientTypeID = null;
	private central cenRepoObj = null;
	private Vector<String> bookingId = new Vector<String>(10, 10);
	
	public adminClient(String inId, central inCenRepoObj) 
	{
		super();
		System.out.printf("Client %s Started", inId);
		clientTypeID = inId;
		cenRepoObj = inCenRepoObj;
		start();
	}
	
	public void run()
	{
		rmiinterface rpcObj = getRpcObj();
		sendCreateRoom(20, rpcObj);
	}
	
	private void sendCreateRoom(Integer times, rmiinterface rpcObj)
	{
		for(int i = 0; i < times; i++)
		{
			System.out.println(createRoomRpc(rpcObj));
			try 
			{
				Thread.sleep(1000);
			} 
			catch (InterruptedException e) 
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
	private void sendDeleteRoom(Integer times, rmiinterface rpcObj)
	{
		for(int i = 0; i < times; i++)
		{
			System.out.println(deleteRoomRpc(rpcObj));
		}
	}
	
	private void sendBookRoom(Integer times, rmiinterface rpcObj)
	{
		for(int i = 0; i < times; i++)
		{
			System.out.println(bookRoomRpc(rpcObj));
		}
	}
	
	private void sendCancelBooking(Integer times, rmiinterface rpcObj)
	{
		for(int i = 0; i < times; i++)
		{
			System.out.println(cancelBooking(rpcObj));
		}
	}
	
	private Integer createRoomRpc(rmiinterface rpcObj)
	{
		Integer rt = 0;
		List<String> tmp = new ArrayList<String>();
		for(int i = 0; i < 5; i++)
		{
			tmp.add(timeSlotGenerator());
		}
		try 
		{
			rt = rpcObj.createRoom(clientTypeID, roomNumGenerator(), dateGenerator(), tmp);
		} catch (RemoteException e) 
		{	
			e.printStackTrace();
		}
		return rt;
	}
	
	private Integer deleteRoomRpc(rmiinterface rpcObj)
	{
		Integer rt = 0;
		List<String> tmp = new ArrayList<String>();
		for(int i = 0; i < 2; i++)
		{
			tmp.add(timeSlotGenerator());
		}
		try 
		{
			rt = rpcObj.deleteRoom(clientTypeID, roomNumGenerator(), dateGenerator(), tmp);
		} catch (RemoteException e) 
		{	
			e.printStackTrace();
		}
		return rt;
	}
	
	private String bookRoomRpc(rmiinterface rpcObj)
	{
		String rt = null;
		
		try 
		{
			rt = rpcObj.bookRoom(clientTypeID, roomNumGenerator(), dateGenerator(), timeSlotGenerator());
		} 
		catch (RemoteException e) 
		{	
			e.printStackTrace();
		}
		if(rt != null)
		{
			bookingId.add(rt);
		}
		return rt;
	}
	
	private Integer cancelBooking(rmiinterface rpcObj)
	{
		Integer rt = 0;
		if(bookingId.size() > 0)
		{
			try 
			{
				rpcObj.cancelBooking(clientTypeID, bookingId.get(0));
				bookingId.remove(0);
			} 
			catch (RemoteException e) 
			{
				e.printStackTrace();
			}
		}
		return rt;
	}
	
	private String timeSlotGenerator()
	{
		Random r = new Random();
		Integer starthour = r.nextInt(24-1) + 1;
		Integer endhourIn = r.nextInt(3-1) + 1;
		Integer endhour = starthour + endhourIn;
		Integer startmins = r.nextInt(60-1) + 1;
		Integer endmins = r.nextInt(60-1) + 1;
		return(starthour.toString() + ":" + startmins + " - " + endhour + ":" + endmins);
	}
	
	private Integer roomNumGenerator()
	{
		Random r = new Random();
		Integer room = r.nextInt(210-200) + 200;
		return(room);
	}
	
	private String dateGenerator()
	{
		Random r = new Random();
		Integer date = r.nextInt(27-20) + 20;
		Integer month = 10;
		Integer year = 2017;
		
		return (date.toString() + "-" + month.toString() + "-" + year.toString());
	}
	
	private rmiinterface getRpcObj()
	{
		rmiinterface rpcObj = null;
		try
		{
			if(clientTypeID.contains("DVL"))
			{
				rpcObj = (rmiinterface)Naming.lookup(cenRepoObj.getDVLServer());
			}
			else if(clientTypeID.contains("KKL"))
			{
				rpcObj = (rmiinterface)Naming.lookup(cenRepoObj.getKKLServer());
			}
			else if(clientTypeID.contains("WST"))
			{
				rpcObj = (rmiinterface)Naming.lookup(cenRepoObj.getWSTServer());
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return rpcObj;
	}
}


public class client {
	public static void main(String args[]) throws Exception {
		try
		{
			rmiinterface rpcObj = (rmiinterface)Naming.lookup("//localhost/RmiServer");
			System.out.println(rpcObj.getMsg());
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}
}
