import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.rmi.*;
import java.rmi.server.UnicastRemoteObject;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import org.omg.CosNaming.*;
import org.omg.CosNaming.NamingContextPackage.*;
import org.omg.CORBA.*;
import org.omg.PortableServer.*;

/* REPLICA MANAGER */
public class rmirpc
{
	Integer DVLport = central.udpPortDVLRM1;
	Integer KKLport = central.udpPortKKLRM1;
	Integer WSTport = central.udpPortWSTRM1;
	Integer RMport = central.udpPortRM1;
	void createServers()
	{
		try
		{
			dvlServer.start();
			kklServer.start();
			wstServer.start();
			replicaManager.start();
		    //rmirpcImpl objRmirpcImplDVL = new rmirpcImpl("DVL", DVLport, objCentral);
		    System.out.println("Servers are ready and waiting ...");
		}
		catch(Exception e)
		{
			System.err.println("ERROR: " + e);
			e.printStackTrace();
		}
		
		System.out.println("Servers Exiting ...");
	}
	
	Thread replicaManager = new Thread()
	{
		public void run()
		{
			DatagramSocket serverSocket = null;
			String response = null;
			try
			{
				byte[] receiveData = new byte[1024];
			    byte[] sendData = new byte[1024];
			    
			    while(true)
		        {
			    	serverSocket = new DatagramSocket(RMport);
		            DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
		            serverSocket.receive(receivePacket);
		            String request = new String(receivePacket.getData());
		            System.out.println(RMport + " received " + request);
		            /* CHECK REQUEST and get response*/    
		            InetAddress IPAddress = receivePacket.getAddress();
		            int port = receivePacket.getPort();     
	                if(response != null) {
	                	sendData = response.getBytes();
	                }
	                else {
	                	sendData = "FAILED".getBytes();
	                }
	                DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, port);
	                serverSocket.send(sendPacket);
	                serverSocket.close();    
		        }
			}
			catch(SocketException e)
			{
				e.printStackTrace();
			}
			catch(IOException e)
			{
				e.printStackTrace();
			}
			finally
	 		{
				if(serverSocket != null)
				{
					serverSocket.close();
				}
	 		}
		}
	};
	
	Thread dvlServer = new Thread()
	{
		public void run()
		{
			DatagramSocket serverSocket = null;
			String response = null;
			try
			{
				byte[] receiveData = new byte[1024];
			    byte[] sendData = new byte[1024];
			    
			    while(true)
		        {
			    	serverSocket = new DatagramSocket(DVLport);
		            DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
		            serverSocket.receive(receivePacket);
		            String request = new String(receivePacket.getData());
		            System.out.println(DVLport + " received " + request);
		            /* CHECK REQUEST and get response*/    
		            InetAddress IPAddress = receivePacket.getAddress();
		            int port = receivePacket.getPort();     
	                if(response != null) {
	                	sendData = response.getBytes();
	                }
	                else {
	                	sendData = "FAILED".getBytes();
	                }
	                DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, port);
	                serverSocket.send(sendPacket);
	                serverSocket.close();    
		        }
			}
			catch(SocketException e)
			{
				e.printStackTrace();
			}
			catch(IOException e)
			{
				e.printStackTrace();
			}
			finally
	 		{
				if(serverSocket != null)
				{
					serverSocket.close();
				}
	 		}
		}
	};
	
	Thread kklServer = new Thread()
	{
		public void run()
		{
			DatagramSocket serverSocket = null;
			String response = null;
			try
			{
				byte[] receiveData = new byte[1024];
			    byte[] sendData = new byte[1024];
			    
			    while(true)
		        {
			    	serverSocket = new DatagramSocket(KKLport);
		            DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
		            serverSocket.receive(receivePacket);
		            String request = new String(receivePacket.getData());
		            System.out.println(KKLport + " received " + request);
		            /* CHECK REQUEST and get response*/    
		            InetAddress IPAddress = receivePacket.getAddress();
		            int port = receivePacket.getPort();     
	                if(response != null) {
	                	sendData = response.getBytes();
	                }
	                else {
	                	sendData = "FAILED".getBytes();
	                }
	                DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, port);
	                serverSocket.send(sendPacket);
	                serverSocket.close();    
		        }
			}
			catch(SocketException e)
			{
				e.printStackTrace();
			}
			catch(IOException e)
			{
				e.printStackTrace();
			}
			finally
	 		{
				if(serverSocket != null)
				{
					serverSocket.close();
				}
	 		}
		}
	};
	
	Thread wstServer = new Thread()
	{
		public void run()
		{
			DatagramSocket serverSocket = null;
			String response = null;
			try
			{
				byte[] receiveData = new byte[1024];
			    byte[] sendData = new byte[1024];
			    
			    while(true)
		        {
			    	serverSocket = new DatagramSocket(WSTport);
		            DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
		            serverSocket.receive(receivePacket);
		            String request = new String(receivePacket.getData());
		            System.out.println(WSTport + " received " + request);
		            /* CHECK REQUEST and get response*/
		            response = handleUdpRequest(request);
		            InetAddress IPAddress = receivePacket.getAddress();
		            int port = receivePacket.getPort();     
	                if(response != null) {
	                	sendData = response.getBytes();
	                }
	                else {
	                	sendData = "FAILED".getBytes();
	                }
	                DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, port);
	                serverSocket.send(sendPacket);
	                serverSocket.close();    
		        }
			}
			catch(SocketException e)
			{
				e.printStackTrace();
			}
			catch(IOException e)
			{
				e.printStackTrace();
			}
			finally
	 		{
				if(serverSocket != null)
				{
					serverSocket.close();
				}
	 		}
		}
		
		public String handleUdpRequest(String req)
		{
			String reqTokens[] = req.split(";");
			switch(reqTokens[0])
			{
			case "create":
				break;
			case "delete":
				break;
			case "book":
				break;
			case "cancel":
				break;
			case "available":
				break;
			case "change":
				break;
			}
			return null;
		}
	};

	public static void main(String args[])
	{
		RMVJ objServerStarter = new RMVJ();
		objServerStarter.createServers();
	}
}
