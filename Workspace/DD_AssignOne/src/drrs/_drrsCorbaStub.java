package drrs;


/**
* drrs/_drrsCorbaStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from IDL/drrs.idl
* Friday, November 17, 2017 12:34:44 PM EST
*/

public class _drrsCorbaStub extends org.omg.CORBA.portable.ObjectImpl implements drrs.drrsCorba
{


  /* Admin */
  public void createRoom (String adminId, int roomNumber, String date, String[] listOfTimeSlots, org.omg.CORBA.IntHolder rt)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("createRoom", true);
                $out.write_string (adminId);
                $out.write_long (roomNumber);
                $out.write_string (date);
                drrs.LISTTimeSlotHelper.write ($out, listOfTimeSlots);
                $in = _invoke ($out);
                rt.value = $in.read_long ();
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                createRoom (adminId, roomNumber, date, listOfTimeSlots, rt        );
            } finally {
                _releaseReply ($in);
            }
  } // createRoom

  public void deleteRoom (String adminId, int roomNumber, String date, String[] listOfTimeSlots, org.omg.CORBA.IntHolder rt)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("deleteRoom", true);
                $out.write_string (adminId);
                $out.write_long (roomNumber);
                $out.write_string (date);
                drrs.LISTTimeSlotHelper.write ($out, listOfTimeSlots);
                $in = _invoke ($out);
                rt.value = $in.read_long ();
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                deleteRoom (adminId, roomNumber, date, listOfTimeSlots, rt        );
            } finally {
                _releaseReply ($in);
            }
  } // deleteRoom


  /* Student */
  public void bookRoom (String studentId, int roomNumber, String date, String timeSlot, org.omg.CORBA.StringHolder rt, String campusName)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("bookRoom", true);
                $out.write_string (studentId);
                $out.write_long (roomNumber);
                $out.write_string (date);
                $out.write_string (timeSlot);
                $out.write_string (campusName);
                $in = _invoke ($out);
                rt.value = $in.read_string ();
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                bookRoom (studentId, roomNumber, date, timeSlot, rt, campusName        );
            } finally {
                _releaseReply ($in);
            }
  } // bookRoom

  public void getAvailableTimeSlot (String studentId, String date, org.omg.CORBA.StringHolder rt)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAvailableTimeSlot", true);
                $out.write_string (studentId);
                $out.write_string (date);
                $in = _invoke ($out);
                rt.value = $in.read_string ();
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                getAvailableTimeSlot (studentId, date, rt        );
            } finally {
                _releaseReply ($in);
            }
  } // getAvailableTimeSlot

  public void cancelBooking (String studentId, String bookingID, org.omg.CORBA.IntHolder rt)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("cancelBooking", true);
                $out.write_string (studentId);
                $out.write_string (bookingID);
                $in = _invoke ($out);
                rt.value = $in.read_long ();
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                cancelBooking (studentId, bookingID, rt        );
            } finally {
                _releaseReply ($in);
            }
  } // cancelBooking

  public void changeReservation (String studentId, String booking_id, String newCampusName, int newRoomNumber, String newDate, String newTimeSlot, org.omg.CORBA.StringHolder rt)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("changeReservation", true);
                $out.write_string (studentId);
                $out.write_string (booking_id);
                $out.write_string (newCampusName);
                $out.write_long (newRoomNumber);
                $out.write_string (newDate);
                $out.write_string (newTimeSlot);
                $in = _invoke ($out);
                rt.value = $in.read_string ();
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                changeReservation (studentId, booking_id, newCampusName, newRoomNumber, newDate, newTimeSlot, rt        );
            } finally {
                _releaseReply ($in);
            }
  } // changeReservation

  public void shutdown ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("shutdown", false);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                shutdown (        );
            } finally {
                _releaseReply ($in);
            }
  } // shutdown

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:drrs/drrsCorba:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _drrsCorbaStub
